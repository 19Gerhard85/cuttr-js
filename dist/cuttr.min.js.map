{"version":3,"sources":["cuttr.js"],"names":["root","define","amd","factory","module","exports","Cuttr","this","Object","self","el","create","prototype","originalContent","contentTruncationState","document","querySelectorAll","truncate","length","loadedClass","title","readMore","readLessText","readMoreText","readMoreBtnPosition","readMoreBtnAdditionalClasses","readMoreBtnSelectorClass","afterExpand","afterTruncate","options","keys","forEach","key","truncateIt","thisElement","str","ending","_str$match","thisIndex","dataset","cuttrIndex","substring","cuttrMethod","contentVisibilityState","words","split","splice","join","sentences","match","currentElement","btnAdditionalClasses","nextElementSibling","btnPosition","addReadMore","updated","cuttrReadmore","cuttrReadless","cuttrReadmorePosition","addEventListener","cuttrReadmoreTag","event","readMoreBtnTag","target","classList","contains","updateContent","cuttrReadmoreAdditionalClasses","btnText","btnMarkup","btnTag","replace","btnExists","matches","btnSelectorClass","querySelector","insertAdjacentHTML","previousElementSibling","truncateLength","console","showError","parentNode","displayWarnings","isAuthorized","innerHTML","CUTTR_LICENSE","cuttrLength","truncateEnding","cuttrEnding","currentContent","trim","truncatedContent","expandContent","currentElements","elementsToTruncate","type","text","window","thisBtnPosition","i","selector","call","truncateContent","removeChild","each","e","destroy","remove","removeAttribute","dataIndex","RegExp","test","domain","indexOf","contentToTitle","cuttrTitle","setAttribute","textContent","init","jQuery","$","fn","element","extend","data","log"],"mappings":"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","file":"cuttr.min.js","sourcesContent":["/*!\n * Cuttr 1.4.3\n * https://github.com/d-e-v-s-k/cuttr-js\n *\n * @license GPLv3 for open source use only\n * or Cuttr Commercial License for commercial use\n * https://cuttr.kulahs.de/pricing/\n *\n * Copyright (C) 2022 https://cuttr.kulahs.de/ - A project by DEVSK\n **/\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define([], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like environments that support module.exports,\n        // like Node.\n        module.exports = factory();\n    } else {\n        // Browser globals (root is window)\n        root.Cuttr = factory();\n    }\n}(this, function () {\n\n    //  private global vars\n    let CUTTR_LICENSE = true;\n\n    //  init Cuttr\n    const Cuttr = function (el, options){\n        'use strict';\n\n        const self = Object.create(Cuttr.prototype);\n\n        /**\n         * Default settings\n         */\n        self.options = {\n            //  global data\n            elementsToTruncate:  typeof el === 'string' ? document.querySelectorAll(el) : el,\n            originalContent: [],\n            contentVisibilityState: [],\n            contentTruncationState: [],\n\n            //  set default options\n            truncate: 'characters', // truncate method [characters|words|sentences]\n            length: 100,  //  truncation limit\n            ending: '...',    //  truncation ending string\n            loadedClass: 'cuttr--loaded', //  class to set when truncation finished\n            title: false,    //  add original content to elements title tag\n            readMore: false, // read more button enabled/disabled\n            readMoreText: 'read more',\n            readLessText: 'read less',\n            readMoreBtnPosition: 'after',  // [after|inside]\n            readMoreBtnTag: 'button', //  read-more button tag [button|a|...]\n            readMoreBtnSelectorClass: 'cuttr__readmore', //  read-more button selector\n            readMoreBtnAdditionalClasses: '',\n\n            //  callback functions\n            afterTruncate: function(){},\n            afterExpand: function(){},\n\n            //  private options\n            dataIndex: 'data-cuttr-index',   // cuttr index data attribute\n        };\n\n        /**\n         * User defined options\n         */\n        if (options) {\n            Object.keys(options).forEach(function (key){\n                self.options[key] = options[key];\n            });\n        }\n\n\n        const init = function () {\n            prepare.call(this);\n        };\n\n\n        /*\n            prepare cuttable elements\n         */\n        function prepare() {\n\n            const isAuthorized = self.options && new RegExp('([\\\\d\\\\w]{8}-){3}[\\\\d\\\\w]{8}|^(?=.*?[A-Y])(?=.*?[a-y])(?=.*?[0-8])(?=.*?[#?!@$%^&*-]).{8,}$').test(self.options['li'+'cen'+'seK' + 'e' + 'y']) || document.domain.indexOf('cuttr'+'.' +'kul' + 'ahs' + '.' + 'de') > -1;\n\n            //  return if no target element defined\n            if (!self.options.elementsToTruncate) {\n                return;\n            } else {\n                displayWarnings(isAuthorized);\n            }\n\n            //  set element type depending on source\n            if ( !('length' in self.options.elementsToTruncate) )\n                self.options.elementsToTruncate = [self.options.elementsToTruncate];\n\n            //  loop through target elements to truncate\n            for (let i = 0; i < self.options.elementsToTruncate.length; i++) {\n\n                const currentElement  = self.options.elementsToTruncate[i];\n                const currentContent  = currentElement.innerHTML;\n                const truncateLength  = (currentElement.dataset.cuttrLength) ? currentElement.dataset.cuttrLength : self.options.length;\n                const truncateEnding  = (currentElement.dataset.cuttrEnding) ? currentElement.dataset.cuttrEnding : self.options.ending;\n                const contentToTitle  = (currentElement.dataset.cuttrTitle) ? currentElement.dataset.cuttrTitle : self.options.title;\n                let truncatedContent;\n\n                //  add truncate-element index to element\n                currentElement.setAttribute(self.options.dataIndex, i);\n\n                //  temporary save elements original content\n                self.options.originalContent.push(currentContent);\n\n                //  truncate content\n                truncatedContent = truncateIt(currentElement, currentContent.trim(), truncateLength, truncateEnding);\n\n                //  set title attr with original text content\n                if (contentToTitle)\n                    currentElement.title = currentElement.textContent.trim();\n\n                //  set new content\n                currentElement.innerHTML = truncatedContent;\n\n                //  add read-more button if current content is truncated\n                if (self.options.contentTruncationState[i]) {\n\n                    if (self.options.readMore)\n                        addReadMore(currentElement);\n\n                    currentElement.classList += ' ' + self.options.loadedClass;\n\n                }\n\n                //  here go the callbacks\n                self.options.afterTruncate.call(currentElement);\n\n            }\n\n        }\n\n\n        /*\n            truncate text to specific length\n        */\n        function truncateIt(thisElement, str, length, ending) {\n\n            const thisIndex       = thisElement.dataset.cuttrIndex;\n            const truncateMethod  = (thisElement.dataset.cuttrMethod) ? thisElement.dataset.cuttrMethod : self.options.truncate;\n\n            //  set defaults\n            if (length == null) {\n                length = 100;\n            }\n\n            //  set defaults\n            if (ending == null) {\n                ending = '...';\n            }\n\n            //  truncate content based on method\n            switch (truncateMethod) {\n\n                //  truncate characters only\n                case 'characters':\n\n                    //  check if content (string) is longer than truncation limit\n                    if (str.length > length) {\n\n                        //  set current content truncation true and return truncated string\n                        self.options.contentTruncationState[thisIndex] = true;\n                        //  set visibility state\n                        self.options.contentVisibilityState[thisIndex] = false;\n\n                        //  return new string\n                        return str.substring(0, length - ending.length) + ending + ' ';\n\n                    } else {\n                        return str;\n                    }\n\n                    break;\n\n                //  truncate words\n                case 'words':\n\n                    const words = str.split(/ (?=[^>]*(?:<|$))/);\n\n                    //  check if content (string) is longer than truncation limit\n                    if (words.length > length) {\n\n                        //  set current content truncation true and return truncated string\n                        self.options.contentTruncationState[thisIndex] = true;\n                        //  set visibility state\n                        self.options.contentVisibilityState[thisIndex] = false;\n                        //  return new string\n                        //  split spaces followed by sequence of characters are NOT greater-than signs, less-than sign\n                        return words.splice(0,length).join(' ') + ' ' + ending + ' ';\n\n                    } else {\n                        return str;\n                    }\n\n                    break;\n\n                //  truncate full sentences\n                case 'sentences':\n\n                    const sentences = str.match(/[^\\.!\\?]+[\\.!\\?]+/g) ?? [];\n\n                    //  check if content (string) is longer than truncation limit\n                    if (sentences.length > length) {\n\n                        //  set current contetn truncation true and return truncated string\n                        self.options.contentTruncationState[thisIndex] = true;\n                        //  set visibility state\n                        self.options.contentVisibilityState[thisIndex] = false;\n                        //  return new string\n                        return sentences.splice(0,length).join(' ') + ' ' + ending + ' ';\n\n                    } else {\n                        return str;\n                    }\n\n                    break;\n\n                //  truncate characters by default\n                default:\n\n                    //  check if content (string) is longer than truncation limit\n                    if (str.length > length) {\n\n                        //  set current contetn truncation true and return truncated string\n                        self.options.contentTruncationState[thisIndex] = true;\n                        //  set visibility state\n                        self.options.contentVisibilityState[thisIndex] = false;\n                        //  return new string\n                        return str.substring(0, length - ending.length) + ending;\n\n                    } else {\n                        return str;\n                    }\n\n            }\n\n        }\n\n\n        /*\n            append read more button\n        */\n        function addReadMore(thisElement, updated) {\n\n            const currentElement      = thisElement;\n            const thisIndex           = currentElement.dataset.cuttrIndex;\n            const readMoreText        = (currentElement.dataset.cuttrReadmore) ? currentElement.dataset.cuttrReadmore : self.options.readMoreText;\n            const readLessText        = (currentElement.dataset.cuttrReadmore) ? currentElement.dataset.cuttrReadless : self.options.readLessText;\n            const btnPosition         = (currentElement.dataset.cuttrReadmorePosition) ? currentElement.dataset.cuttrReadmorePosition : self.options.readMoreBtnPosition;\n            const btnTag              = (currentElement.dataset.cuttrReadmoreTag) ? currentElement.dataset.cuttrReadmoreTag : self.options.readMoreBtnTag;\n            const btnSelectorClass    = '.' + self.options.readMoreBtnSelectorClass;\n            const btnAdditionalClasses = (currentElement.dataset.cuttrReadmoreAdditionalClasses) ? currentElement.dataset.cuttrReadmoreAdditionalClasses : self.options.readMoreBtnAdditionalClasses;\n            const btnText             = (self.options.contentVisibilityState[thisIndex]) ? readLessText : readMoreText;\n            const btnAriaExpanded     = (self.options.contentVisibilityState[thisIndex]) ? 'true' : 'false';\n            const btnMarkup           = ' <' + btnTag + ' aria-expanded=\"' + btnAriaExpanded + '\" class=\"' + self.options.readMoreBtnSelectorClass + ' ' + btnAdditionalClasses + '\">' + btnText.replace(/<[^>]*>/g, \"\") + '</' + btnTag + '>';\n            let btnExists;\n\n            //  check for button existence depending on btn position\n            if (btnPosition == 'after' && currentElement.nextElementSibling) {\n                btnExists = currentElement.nextElementSibling.matches(btnSelectorClass);\n            } else if (btnPosition == 'inside') {\n                btnExists = currentElement.querySelector(btnSelectorClass);\n            }\n\n            //  insert element only if it doesn't exist\n            if (!btnExists) {\n\n                //  add read-more button to dom\n                switch (btnPosition) {\n                    case 'after':\n                        currentElement.insertAdjacentHTML('afterend', btnMarkup);\n                        break;\n                    case 'inside':\n                        currentElement.insertAdjacentHTML('beforeend', btnMarkup);\n                        break;\n                    default:\n                        console.log('no matching read-more button position defined');\n                }\n\n                //  listen to read-more clicks - show/hide content\n                if (!updated) {\n\n                    if (btnPosition == 'after') {\n                        currentElement.nextElementSibling.addEventListener('click',function(event) {\n                            if (event.target && event.target.classList.contains(self.options.readMoreBtnSelectorClass)) {\n                                updateContent(event, btnPosition);\n                            }\n                        });\n                    } else if (btnPosition == 'inside') {\n                        currentElement.addEventListener('click',function(event) {\n                            if (event.target && event.target.classList.contains(self.options.readMoreBtnSelectorClass)) {\n                                updateContent(event, btnPosition);\n                            }\n                        });\n                    }\n\n                }\n\n            }\n\n        }\n\n\n        /*\n            display original/truncated content\n        */\n        function updateContent(event, btnPosition) {\n\n            const currentElement      = (btnPosition == 'after') ? event.target.previousElementSibling : event.target.parentNode;\n            const currentContent      = currentElement.innerHTML;\n            const thisIndex           = currentElement.dataset.cuttrIndex;\n            const readMoreText        = (currentElement.dataset.cuttrReadmore) ? currentElement.dataset.cuttrReadmore : self.options.readMoreText;\n            const readLessText        = (currentElement.dataset.cuttrReadmore) ? currentElement.dataset.cuttrReadless : self.options.readLessText;\n            const truncateLength      = (currentElement.dataset.cuttrLength) ? currentElement.dataset.cuttrLength : self.options.length;\n            const truncateEnding      = (currentElement.dataset.cuttrEnding) ? currentElement.dataset.cuttrEnding : self.options.ending;\n            let truncatedContent;\n\n            //  show content if its currently truncated\n            if (!self.options.contentVisibilityState[thisIndex]) {\n\n                //  replace content with original content from element at specific index\n                currentElement.innerHTML = self.options.originalContent[thisIndex];\n\n                //  set visibility state\n                self.options.contentVisibilityState[thisIndex] = true;\n\n                if (btnPosition == 'inside' && self.options.readMore)\n                    addReadMore(currentElement, true);\n\n                //  update button text and aria\n                event.target.innerHTML = readLessText.replace(/<[^>]*>/g, \"\");\n                //event.target.setAttribute('aria-expanded', 'true');\n\n                //  here go the callbacks\n                self.options.afterExpand.call(currentElement);\n\n            //  truncate content if its shown completely currently\n            } else {\n\n                //  truncate content\n                truncatedContent = truncateIt(currentElement, currentContent.trim(), truncateLength, truncateEnding);\n                currentElement.innerHTML = truncatedContent;\n\n                //  set visibility state\n                self.options.contentVisibilityState[thisIndex] = false;\n\n                if (btnPosition == 'inside' && self.options.readMore)\n                    addReadMore(currentElement, true);\n\n                //  update button text and aria\n                event.target.innerHTML = readMoreText.replace(/<[^>]*>/g, \"\");\n                //event.target.setAttribute('aria-expanded', 'false');\n\n                //  here go the callbacks\n                self.options.afterTruncate.call(currentElement);\n\n            }\n\n        }\n\n\n        /**\n         * Displays warnings\n         */\n        function displayWarnings(isAuthorized) {\n\n            if (!isAuthorized && CUTTR_LICENSE) {\n                //  declare global const to show error only once\n                CUTTR_LICENSE = false;\n                //  show error message\n                showError('error', 'Cuttr.js has a GPLv3 license and it requires a `licenseKey` option. Read about it here:');\n                showError('error', 'https://github.com/d-e-v-s-k/cuttr-js#options');\n            }\n\n        }\n\n\n        /*\n            public function\n            expand / show original content\n        */\n        self.expandContent = function(selector, btnPosition) {\n\n            let currentElements;\n\n            //  set specific element to expand or use current instance node\n            if (selector) {\n                currentElements = document.querySelectorAll(selector);\n            } else {\n                currentElements = self.options.elementsToTruncate;\n            }\n\n            for (let i = 0; i < currentElements.length; i++) {\n\n                const currentElement      = currentElements[i];\n                const currentContent      = currentElement.innerHTML;\n                const thisIndex           = currentElement.dataset.cuttrIndex;\n                const readLessText        = (currentElement.dataset.cuttrReadmore) ? currentElement.dataset.cuttrReadless : self.options.readLessText;\n                const thisBtnPosition     = (btnPosition) ? btnPosition : self.options.readMoreBtnPosition;\n                const btnSelectorClass    = '.' + self.options.readMoreBtnSelectorClass;\n                let btnExists;\n\n                //  show content if its currently truncated\n                if (!self.options.contentVisibilityState[thisIndex]) {\n\n                    //  replace content with original content from element at specific index\n                    currentElement.innerHTML = self.options.originalContent[thisIndex];\n\n                    //  set visibility state\n                    self.options.contentVisibilityState[thisIndex] = true;\n\n                    //  read-more handling only if enabled\n                    if (self.options.readMore) {\n\n                        if (thisBtnPosition == 'inside')\n                            addReadMore(currentElement, true);\n\n                        //  check for button existence depending on btn position\n                        if (thisBtnPosition == 'after') {\n                            btnExists = currentElement.nextElementSibling;\n                        } else if (thisBtnPosition == 'inside') {\n                            btnExists = currentElement.querySelector(btnSelectorClass);\n                        }\n\n                        //  update button text\n                        if(btnExists)\n                            btnExists.innerHTML = readLessText.replace(/<[^>]*>/g, \"\");\n\n                    }\n\n                    //  here go the callbacks\n                    self.options.afterExpand.call(currentElement);\n\n                }\n\n            }\n\n        }\n\n\n        /*\n            public function\n            truncate / hide original content\n        */\n        self.truncateContent = function(selector, btnPosition) {\n\n            let currentElements;\n\n            //  set specific element to expand or use current instance node\n            if (selector) {\n                currentElements = document.querySelectorAll(selector);\n            } else {\n                currentElements = self.options.elementsToTruncate;\n            }\n\n            for (let i = 0; i < currentElements.length; i++) {\n\n                const currentElement      = currentElements[i];\n                const currentContent      = currentElement.innerHTML;\n                const thisIndex           = currentElement.dataset.cuttrIndex;\n                const readMoreText        = (currentElement.dataset.cuttrReadmore) ? currentElement.dataset.cuttrReadmore : self.options.readMoreText;\n                const thisBtnPosition     = (btnPosition) ? btnPosition : self.options.readMoreBtnPosition;\n                const btnSelectorClass    = '.' + self.options.readMoreBtnSelectorClass;\n                const truncateLength      = (currentElement.dataset.cuttrLength) ? currentElement.dataset.cuttrLength : self.options.length;\n                const truncateEnding      = (currentElement.dataset.cuttrEnding) ? currentElement.dataset.cuttrEnding : self.options.ending;\n                let truncatedContent;\n                let btnExists;\n\n                //  hide content if its currently fully visible\n                if (self.options.contentVisibilityState[thisIndex]) {\n\n                    //  truncate content\n                    truncatedContent = truncateIt(currentElement, currentContent.trim(), truncateLength, truncateEnding);\n                    currentElement.innerHTML = truncatedContent;\n\n                    //  set visibility state\n                    self.options.contentVisibilityState[thisIndex] = false;\n\n                    //  read-more handling only if enabled\n                    if (self.options.readMore) {\n\n                        if (thisBtnPosition == 'inside')\n                            addReadMore(currentElement, true);\n\n                        //  check for button existence depending on btn position\n                        if (thisBtnPosition == 'after') {\n                            btnExists = currentElement.nextElementSibling;\n                        } else if (thisBtnPosition == 'inside') {\n                            btnExists = currentElement.querySelector(btnSelectorClass);\n                        }\n\n                        //  update button text\n                        if(btnExists)\n                            btnExists.innerHTML = readMoreText.replace(/<[^>]*>/g, \"\");\n\n                    }\n\n                    //  here go the callbacks\n                    self.options.afterTruncate.call(currentElement);\n\n                }\n\n            }\n\n        }\n\n\n        /*\n            public function\n            restore the element to a pre-init state\n        */\n        self.destroy = function(selector, btnPosition) {\n\n            //  expand original content\n            self.expandContent(selector, btnPosition);\n\n            let currentElements;\n\n            //  set specific element to expand or use current instance node\n            if (selector) {\n                currentElements = document.querySelectorAll(selector);\n            } else {\n                currentElements = self.options.elementsToTruncate;\n            }\n\n            for (let i = 0; i < currentElements.length; i++) {\n\n                let currentElement      = currentElements[i];\n                const currentContent      = currentElement.innerHTML;\n                const thisIndex           = currentElement.dataset.cuttrIndex;\n                const thisBtnPosition     = (btnPosition) ? btnPosition : self.options.readMoreBtnPosition;\n                const btnSelectorClass    = '.' + self.options.readMoreBtnSelectorClass;\n                let btnExists;\n\n                //  set visibility state\n                self.options.contentVisibilityState[thisIndex] = true;\n\n                //  remove read-more  if enabled\n                if (self.options.readMore) {\n\n                    if (thisBtnPosition == 'inside')\n                        addReadMore(currentElement, true);\n\n                    //  check for button existence depending on btn position\n                    if (thisBtnPosition == 'after') {\n                        btnExists = currentElement.nextElementSibling;\n                    } else if (thisBtnPosition == 'inside') {\n                        btnExists = currentElement.querySelector(btnSelectorClass);\n                    }\n\n                    //  remove button\n                    if(btnExists)\n                        btnExists.parentNode.removeChild(btnExists);\n                    //btnExists.remove();\n\n                }\n\n                //  remove element classes\n                currentElement.classList.remove(self.options.loadedClass);\n\n                //  remove truncate-element index from element\n                currentElement.removeAttribute(self.options.dataIndex);\n\n                //  reset current truncation instance\n                currentElement = null;\n\n            }\n\n        }\n\n\n        //utils\n        /*\n            shows console message\n        */\n        function showError(type, text){\n            window.console && window.console[type] && window.console[type]('Cuttr: ' + text);\n        }\n\n        init();\n        return self;\n    };\n    return Cuttr;\n}));\n\n\n/**\n * jQuery adapter for Cuttr.js 1.4.3\n */\nif(window.jQuery && window.Cuttr){\n    (function ($, Cuttr) {\n        'use strict';\n\n        // No jQuery No Go\n        if (!$ || !Cuttr) {\n            //window.cuttr_utils.showError('error', 'jQuery is required to use the jQuery Cuttr adapter!');\n            console.log('ERROR - jQuery is required to use the jQuery Cuttr adapter!');\n            return;\n        }\n\n        $.fn.Cuttr = function (options) {\n            return this.each((e, element) => {\n                options = $.extend({}, options, {'$': $});\n                if (!$.data(element, 'Cuttr')) {\n                    $.data(element, 'Cuttr', new Cuttr(element, options));\n                }\n            });\n        };\n    })(window.jQuery, window.Cuttr);\n}\n"]}