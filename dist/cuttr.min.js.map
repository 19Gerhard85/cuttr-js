{"version":3,"sources":["cuttr.js"],"names":["root","define","amd","factory","module","exports","Cuttr","this","el","options","self","Object","create","prototype","originalContent","document","querySelectorAll","contentVisibilityState","contentTruncationState","truncate","length","ending","loadedClass","readMore","readMoreText","readLessText","readMoreBtnTag","dataIndex","keys","forEach","key","truncateMethod","thisElement","str","thisIndex","dataset","cuttrIndex","cuttrMethod","words","substring","sentences","splice","join","match","updated","currentElement","btnText","nextElementSibling","matches","btnSelectorClass","querySelector","console","btnExists","cuttrReadmore","btnPosition","cuttrReadless","addEventListener","cuttrReadmorePosition","readMoreBtnPosition","event","target","contains","readMoreBtnSelectorClass","cuttrReadmoreTag","updateContent","btnAdditionalClasses","cuttrReadmoreAdditionalClasses","readMoreBtnAdditionalClasses","btnTag","replace","btnMarkup","insertAdjacentHTML","truncateEnding","truncatedContent","log","classList","currentContent","currentElements","selector","previousElementSibling","parentNode","innerHTML","elementsToTruncate","truncateLength","cuttrLength","cuttrEnding","thisBtnPosition","truncateIt","trim","addReadMore","i","element","destroy","expandContent","removeChild","remove","removeAttribute","contentToTitle","cuttrTitle","title","push","call","init","window","jQuery","$","fn","each","e","extend","data"],"mappings":"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","file":"cuttr.min.js","sourcesContent":["/*!\n * Cuttr 1.3.1\n * https://github.com/d-e-v-s-k/cuttr-js\n *\n * @license GPLv3 for open source use only\n * or Cuttr Commercial License for commercial use\n * https://cuttr.kulahs.de/pricing/\n *\n * Copyright (C) 2021 https://cuttr.kulahs.de/ - A project by DEVSK\n **/\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define([], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like environments that support module.exports,\n        // like Node.\n        module.exports = factory();\n    } else {\n        // Browser globals (root is window)\n        root.Cuttr = factory();\n    }\n}(this, function () {\n    const Cuttr = function (el, options){\n        'use strict';\n\n        const self = Object.create(Cuttr.prototype);\n\n        /**\n         * Default settings\n         */\n        self.options = {\n            //  global data\n            elementsToTruncate:  typeof el === 'string' ? document.querySelectorAll(el) : el,\n            originalContent: [],\n            contentVisibilityState: [],\n            contentTruncationState: [],\n\n            //  set default options\n            truncate: 'characters', // truncate method [characters|words|sentences]\n            length: 100,  //  truncation limit\n            ending: '...',    //  truncation ending string\n            loadedClass: 'cuttr--loaded', //  class to set when truncation finished\n            title: false,    //  add original content to elements title tag\n            readMore: false, // read more button enabled/disabled\n            readMoreText: 'read more',\n            readLessText: 'read less',\n            readMoreBtnPosition: 'after',  // [after|inside]\n            readMoreBtnTag: 'button', //  read-more button tag [button|a|...]\n            readMoreBtnSelectorClass: 'cuttr__readmore', //  read-more button selector\n            readMoreBtnAdditionalClasses: '',\n\n            //  private options\n            dataIndex: 'data-cuttr-index',   // cuttr index data attribute\n        };\n\n        /**\n         * User defined options\n         */\n        if (options) {\n            Object.keys(options).forEach(function (key){\n                self.options[key] = options[key];\n            });\n        }\n\n\n        //using jQuery initialization? Creating the $.fn.fullpage object\n        /*window.cuttr_api = self;\n\n        if(options.$){\n            console.log(self);\n            Object.keys(self).forEach(function (key) {\n                options.$.fn.Cuttr[key] = self[key];\n            });\n        }*/\n\n\n        const init = function () {\n            prepare.call(this);\n        };\n\n\n        /*\n            prepare cuttable elements\n         */\n        function prepare() {\n\n            //  return if no target element defined\n            if (!self.options.elementsToTruncate) return;\n\n            //  set element type depending on source\n            if ( !('length' in self.options.elementsToTruncate) )\n                self.options.elementsToTruncate = [self.options.elementsToTruncate];\n\n            //  loop through target elements to truncate\n            for (let i = 0; i < self.options.elementsToTruncate.length; i++) {\n\n                const currentElement  = self.options.elementsToTruncate[i];\n                const currentContent  = currentElement.innerHTML;\n                const truncateLength  = (currentElement.dataset.cuttrLength) ? currentElement.dataset.cuttrLength : self.options.length;\n                const truncateEnding  = (currentElement.dataset.cuttrEnding) ? currentElement.dataset.cuttrEnding : self.options.ending;\n                const contentToTitle  = (currentElement.dataset.cuttrTitle) ? currentElement.dataset.cuttrTitle : self.options.title;\n                let truncatedContent;\n\n                //  add truncate-element index to element\n                currentElement.setAttribute(self.options.dataIndex, i);\n\n                //  temporary save elements original content\n                self.options.originalContent.push(currentContent);\n\n                //  truncate content\n                truncatedContent = truncateIt(currentElement, currentContent.trim(), truncateLength, truncateEnding);\n\n                //  set title attr with original text content\n                if (contentToTitle)\n                    currentElement.title = currentElement.textContent.trim();\n\n                //  set new content\n                currentElement.innerHTML = truncatedContent;\n\n                //  add read-more button if current content is truncated\n                if (self.options.contentTruncationState[i]) {\n\n                    if (self.options.readMore)\n                        addReadMore(currentElement);\n\n                    currentElement.classList += ' ' + self.options.loadedClass;\n\n                }\n\n            }\n\n        }\n\n\n        /*\n            truncate text to specific length\n        */\n        function truncateIt(thisElement, str, length, ending) {\n\n            const thisIndex       = thisElement.dataset.cuttrIndex;\n            const truncateMethod  = (thisElement.dataset.cuttrMethod) ? thisElement.dataset.cuttrMethod : self.options.truncate;\n\n            //  set defaults\n            if (length == null) {\n                length = 100;\n            }\n\n            //  set defaults\n            if (ending == null) {\n                ending = '...';\n            }\n\n            //  truncate content based on method\n            switch (truncateMethod) {\n\n                //  truncate characters only\n                case 'characters':\n\n                    //  check if content (string) is longer than truncation limit\n                    if (str.length > length) {\n\n                        //  set current content truncation true and return truncated string\n                        self.options.contentTruncationState[thisIndex] = true;\n                        //  set visibility state\n                        self.options.contentVisibilityState[thisIndex] = false;\n\n                        //  return new string\n                        return str.substring(0, length - ending.length) + ending + ' ';\n\n                    } else {\n                        return str;\n                    }\n\n                    break;\n\n                //  truncate words\n                case 'words':\n\n                    const words = str.split(/ (?=[^>]*(?:<|$))/);\n\n                    //  check if content (string) is longer than truncation limit\n                    if (words.length > length) {\n\n                        //  set current content truncation true and return truncated string\n                        self.options.contentTruncationState[thisIndex] = true;\n                        //  set visibility state\n                        self.options.contentVisibilityState[thisIndex] = false;\n                        //  return new string\n                        //  split spaces followed by sequence of characters are NOT greater-than signs, less-than sign\n                        return words.splice(0,length).join(' ') + ' ' + ending + ' ';\n\n                    } else {\n                        return str;\n                    }\n\n                    break;\n\n                //  truncate full sentences\n                case 'sentences':\n\n                    const sentences = str.match(/[^\\.!\\?]+[\\.!\\?]+/g);\n\n                    //  check if content (string) is longer than truncation limit\n                    if (sentences.length > length) {\n\n                        //  set current contetn truncation true and return truncated string\n                        self.options.contentTruncationState[thisIndex] = true;\n                        //  set visibility state\n                        self.options.contentVisibilityState[thisIndex] = false;\n                        //  return new string\n                        return sentences.splice(0,length).join(' ') + ' ' + ending + ' ';\n\n                    } else {\n                        return str;\n                    }\n\n                    break;\n\n                //  truncate characters by default\n                default:\n\n                    //  check if content (string) is longer than truncation limit\n                    if (str.length > length) {\n\n                        //  set current contetn truncation true and return truncated string\n                        self.options.contentTruncationState[thisIndex] = true;\n                        //  set visibility state\n                        self.options.contentVisibilityState[thisIndex] = false;\n                        //  return new string\n                        return str.substring(0, length - ending.length) + ending;\n\n                    } else {\n                        return str;\n                    }\n\n            }\n\n        }\n\n\n        /*\n            append read more button\n        */\n        function addReadMore(thisElement, updated) {\n\n            const currentElement      = thisElement;\n            const thisIndex           = currentElement.dataset.cuttrIndex;\n            const readMoreText        = (currentElement.dataset.cuttrReadmore) ? currentElement.dataset.cuttrReadmore : self.options.readMoreText;\n            const readLessText        = (currentElement.dataset.cuttrReadmore) ? currentElement.dataset.cuttrReadless : self.options.readLessText;\n            const btnPosition         = (currentElement.dataset.cuttrReadmorePosition) ? currentElement.dataset.cuttrReadmorePosition : self.options.readMoreBtnPosition;\n            const btnTag              = (currentElement.dataset.cuttrReadmoreTag) ? currentElement.dataset.cuttrReadmoreTag : self.options.readMoreBtnTag;\n            const btnSelectorClass    = '.' + self.options.readMoreBtnSelectorClass;\n            const btnAdditionalClasses = (currentElement.dataset.cuttrReadmoreAdditionalClasses) ? currentElement.dataset.cuttrReadmoreAdditionalClasses : self.options.readMoreBtnAdditionalClasses;\n            const btnText             = (self.options.contentVisibilityState[thisIndex]) ? readLessText : readMoreText;\n            const btnAriaExpanded     = (self.options.contentVisibilityState[thisIndex]) ? 'true' : 'false';\n            const btnMarkup           = ' <' + btnTag + ' aria-expanded=\"' + btnAriaExpanded + '\" class=\"' + self.options.readMoreBtnSelectorClass + ' ' + btnAdditionalClasses + '\">' + btnText.replace(/<[^>]*>/g, \"\") + '</' + btnTag + '>';\n            let btnExists;\n\n            //  check for button existence depending on btn position\n            if (btnPosition == 'after' && currentElement.nextElementSibling) {\n                btnExists = currentElement.nextElementSibling.matches(btnSelectorClass);\n            } else if (btnPosition == 'inside') {\n                btnExists = currentElement.querySelector(btnSelectorClass);\n            }\n\n            //  insert element only if it doesn't exist\n            if (!btnExists) {\n\n                //  add read-more button to dom\n                switch (btnPosition) {\n                    case 'after':\n                        currentElement.insertAdjacentHTML('afterend', btnMarkup);\n                        break;\n                    case 'inside':\n                        currentElement.insertAdjacentHTML('beforeend', btnMarkup);\n                        break;\n                    default:\n                        console.log('no matching read-more button position defined');\n                }\n\n                //  listen to read-more clicks - show/hide content\n                if (!updated) {\n\n                    if (btnPosition == 'after') {\n                        currentElement.nextElementSibling.addEventListener('click',function(event) {\n                            if (event.target && event.target.classList.contains(self.options.readMoreBtnSelectorClass)) {\n                                updateContent(event, btnPosition);\n                            }\n                        });\n                    } else if (btnPosition == 'inside') {\n                        currentElement.addEventListener('click',function(event) {\n                            if (event.target && event.target.classList.contains(self.options.readMoreBtnSelectorClass)) {\n                                updateContent(event, btnPosition);\n                            }\n                        });\n                    }\n\n                }\n\n            }\n\n        }\n\n\n        /*\n            display original/truncated content\n        */\n        function updateContent(event, btnPosition) {\n\n            const currentElement      = (btnPosition == 'after') ? event.target.previousElementSibling : event.target.parentNode;\n            const currentContent      = currentElement.innerHTML;\n            const thisIndex           = currentElement.dataset.cuttrIndex;\n            const readMoreText        = (currentElement.dataset.cuttrReadmore) ? currentElement.dataset.cuttrReadmore : self.options.readMoreText;\n            const readLessText        = (currentElement.dataset.cuttrReadmore) ? currentElement.dataset.cuttrReadless : self.options.readLessText;\n            const truncateLength      = (currentElement.dataset.cuttrLength) ? currentElement.dataset.cuttrLength : self.options.length;\n            const truncateEnding      = (currentElement.dataset.cuttrEnding) ? currentElement.dataset.cuttrEnding : self.options.ending;\n            let truncatedContent;\n\n            //  show content if its currently truncated\n            if (!self.options.contentVisibilityState[thisIndex]) {\n\n                //  replace content with original content from element at specific index\n                currentElement.innerHTML = self.options.originalContent[thisIndex];\n\n                //  set visibility state\n                self.options.contentVisibilityState[thisIndex] = true;\n\n                if (btnPosition == 'inside' && self.options.readMore)\n                    addReadMore(currentElement, true);\n\n                //  update button text and aria\n                event.target.innerHTML = readLessText.replace(/<[^>]*>/g, \"\");\n                //event.target.setAttribute('aria-expanded', 'true');\n\n                //  truncate content if its shown completely currently\n            } else {\n\n                //  truncate content\n                truncatedContent = truncateIt(currentElement, currentContent.trim(), truncateLength, truncateEnding);\n                currentElement.innerHTML = truncatedContent;\n\n                //  set visibility state\n                self.options.contentVisibilityState[thisIndex] = false;\n\n                if (btnPosition == 'inside' && self.options.readMore)\n                    addReadMore(currentElement, true);\n\n                //  update button text and aria\n                event.target.innerHTML = readMoreText.replace(/<[^>]*>/g, \"\");\n                //event.target.setAttribute('aria-expanded', 'false');\n\n            }\n\n        }\n\n\n        /*\n            public function\n            expand / show original content\n        */\n        self.expandContent = function(selector, btnPosition) {\n\n            let currentElements;\n\n            //  set specific element to expand or use current instance node\n            if (selector) {\n                currentElements = document.querySelectorAll(selector);\n            } else {\n                currentElements = self.options.elementsToTruncate;\n            }\n\n            for (let i = 0; i < currentElements.length; i++) {\n\n                const currentElement      = currentElements[i];\n                const currentContent      = currentElement.innerHTML;\n                const thisIndex           = currentElement.dataset.cuttrIndex;\n                const readLessText        = (currentElement.dataset.cuttrReadmore) ? currentElement.dataset.cuttrReadless : self.options.readLessText;\n                const thisBtnPosition     = (btnPosition) ? btnPosition : self.options.readMoreBtnPosition;\n                const btnSelectorClass    = '.' + self.options.readMoreBtnSelectorClass;\n                let btnExists;\n\n                //  show content if its currently truncated\n                if (!self.options.contentVisibilityState[thisIndex]) {\n\n                    //  replace content with original content from element at specific index\n                    currentElement.innerHTML = self.options.originalContent[thisIndex];\n\n                    //  set visibility state\n                    self.options.contentVisibilityState[thisIndex] = true;\n\n                    //  read-more handling only if enabled\n                    if (self.options.readMore) {\n\n                        if (thisBtnPosition == 'inside')\n                            addReadMore(currentElement, true);\n\n                        //  check for button existence depending on btn position\n                        if (thisBtnPosition == 'after') {\n                            btnExists = currentElement.nextElementSibling;\n                        } else if (thisBtnPosition == 'inside') {\n                            btnExists = currentElement.querySelector(btnSelectorClass);\n                        }\n\n                        //  update button text\n                        if(btnExists)\n                            btnExists.innerHTML = readLessText.replace(/<[^>]*>/g, \"\");\n\n                    }\n\n                }\n\n            }\n\n        }\n\n\n        /*\n            public function\n            truncate / hide original content\n        */\n        self.truncateContent = function(selector, btnPosition) {\n\n            let currentElements;\n\n            //  set specific element to expand or use current instance node\n            if (selector) {\n                currentElements = document.querySelectorAll(selector);\n            } else {\n                currentElements = self.options.elementsToTruncate;\n            }\n\n            for (let i = 0; i < currentElements.length; i++) {\n\n                const currentElement      = currentElements[i];\n                const currentContent      = currentElement.innerHTML;\n                const thisIndex           = currentElement.dataset.cuttrIndex;\n                const readMoreText        = (currentElement.dataset.cuttrReadmore) ? currentElement.dataset.cuttrReadmore : self.options.readMoreText;\n                const thisBtnPosition     = (btnPosition) ? btnPosition : self.options.readMoreBtnPosition;\n                const btnSelectorClass    = '.' + self.options.readMoreBtnSelectorClass;\n                const truncateLength      = (currentElement.dataset.cuttrLength) ? currentElement.dataset.cuttrLength : self.options.length;\n                const truncateEnding      = (currentElement.dataset.cuttrEnding) ? currentElement.dataset.cuttrEnding : self.options.ending;\n                let truncatedContent;\n                let btnExists;\n\n                //  hide content if its currently truncated\n                if (self.options.contentVisibilityState[thisIndex]) {\n\n                    //  truncate content\n                    truncatedContent = truncateIt(currentElement, currentContent.trim(), truncateLength, truncateEnding);\n                    currentElement.innerHTML = truncatedContent;\n\n                    //  set visibility state\n                    self.options.contentVisibilityState[thisIndex] = false;\n\n                    //  read-more handling only if enabled\n                    if (self.options.readMore) {\n\n                        if (thisBtnPosition == 'inside')\n                            addReadMore(currentElement, true);\n\n                        //  check for button existence depending on btn position\n                        if (thisBtnPosition == 'after') {\n                            btnExists = currentElement.nextElementSibling;\n                        } else if (thisBtnPosition == 'inside') {\n                            btnExists = currentElement.querySelector(btnSelectorClass);\n                        }\n\n                        //  update button text\n                        if(btnExists)\n                            btnExists.innerHTML = readMoreText.replace(/<[^>]*>/g, \"\");\n\n                    }\n\n                }\n\n            }\n\n        }\n\n\n        /*\n            public function\n            restore the element to a pre-init state\n        */\n        self.destroy = function(selector, btnPosition) {\n\n            //  expand original content\n            self.expandContent(selector, btnPosition);\n\n            let currentElements;\n\n            //  set specific element to expand or use current instance node\n            if (selector) {\n                currentElements = document.querySelectorAll(selector);\n            } else {\n                currentElements = self.options.elementsToTruncate;\n            }\n\n            for (let i = 0; i < currentElements.length; i++) {\n\n                let currentElement      = currentElements[i];\n                const currentContent      = currentElement.innerHTML;\n                const thisIndex           = currentElement.dataset.cuttrIndex;\n                const thisBtnPosition     = (btnPosition) ? btnPosition : self.options.readMoreBtnPosition;\n                const btnSelectorClass    = '.' + self.options.readMoreBtnSelectorClass;\n                let btnExists;\n\n                //  set visibility state\n                self.options.contentVisibilityState[thisIndex] = true;\n\n                //  remove read-more  if enabled\n                if (self.options.readMore) {\n\n                    if (thisBtnPosition == 'inside')\n                        addReadMore(currentElement, true);\n\n                    //  check for button existence depending on btn position\n                    if (thisBtnPosition == 'after') {\n                        btnExists = currentElement.nextElementSibling;\n                    } else if (thisBtnPosition == 'inside') {\n                        btnExists = currentElement.querySelector(btnSelectorClass);\n                    }\n\n                    //  remove button\n                    if(btnExists)\n                        btnExists.parentNode.removeChild(btnExists);\n                    //btnExists.remove();\n\n                }\n\n                //  remove element classes\n                currentElement.classList.remove(self.options.loadedClass);\n\n                //  remove truncate-element index from element\n                currentElement.removeAttribute(self.options.dataIndex);\n\n                //  reset current truncation instance\n                currentElement = null;\n\n            }\n\n        }\n\n        init();\n        return self;\n    };\n    return Cuttr;\n}));\n\n\n/**\n * jQuery adapter for Cuttr.js 1.1.0\n */\nif(window.jQuery && window.Cuttr){\n    (function ($, Cuttr) {\n        'use strict';\n\n        // No jQuery No Go\n        if (!$ || !Cuttr) {\n            //window.cuttr_utils.showError('error', 'jQuery is required to use the jQuery Cuttr adapter!');\n            console.log('ERROR - jQuery is required to use the jQuery Cuttr adapter!');\n            return;\n        }\n\n        $.fn.Cuttr = function (options) {\n            return this.each((e, element) => {\n                options = $.extend({}, options, {'$': $});\n                if (!$.data(element, 'Cuttr')) {\n                    $.data(element, 'Cuttr', new Cuttr(element, options));\n                }\n            });\n        };\n    })(window.jQuery, window.Cuttr);\n}\n"]}